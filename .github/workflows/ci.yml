name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpango-1.0-0 libharfbuzz0b libpangoft2-1.0-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy src/crediblend/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src/crediblend --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpango-1.0-0 libharfbuzz0b libpangoft2-1.0-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test CLI basic functionality
      run: |
        crediblend --oof_dir examples --sub_dir examples --out runs/ci_test
        echo "Exit code: $?"
    
    - name: Test CLI with advanced features
      run: |
        crediblend --oof_dir examples --sub_dir examples --out runs/ci_advanced \
          --decorrelate on --stacking lr --search iters=50,restarts=4 --seed 42
        echo "Exit code: $?"
    
    - name: Test CLI with time-sliced analysis
      run: |
        crediblend --oof_dir examples --sub_dir examples --out runs/ci_time \
          --time-col date --freq D --decorrelate on
        echo "Exit code: $?"
    
    - name: Test CLI with PDF export
      run: |
        crediblend --oof_dir examples --sub_dir examples --out runs/ci_pdf \
          --export pdf --summary-json runs/ci_pdf/blend_summary.json --seed 123
        echo "Exit code: $?"
    
    - name: Test Python API
      run: |
        python -c "
        from crediblend.api import fit_blend, predict_blend, search_weights
        import pandas as pd
        import numpy as np
        
        # Create sample data
        oof_data = [
            pd.DataFrame({
                'id': [1, 2, 3, 4, 5],
                'pred': [0.1, 0.2, 0.3, 0.4, 0.5],
                'target': [0, 1, 0, 1, 0],
                'fold': [0, 0, 1, 1, 1]
            }),
            pd.DataFrame({
                'id': [1, 2, 3, 4, 5],
                'pred': [0.2, 0.3, 0.4, 0.5, 0.6],
                'target': [0, 1, 0, 1, 0],
                'fold': [0, 0, 1, 1, 1]
            })
        ]
        
        sub_data = [
            pd.DataFrame({
                'id': [1, 2, 3, 4, 5],
                'pred': [0.15, 0.25, 0.35, 0.45, 0.55]
            }),
            pd.DataFrame({
                'id': [1, 2, 3, 4, 5],
                'pred': [0.25, 0.35, 0.45, 0.55, 0.65]
            })
        ]
        
        # Test API
        model = fit_blend(oof_data, method='mean')
        result = predict_blend(model, sub_data)
        weights, score, info = search_weights(oof_data, random_state=42)
        
        print('âœ… API tests passed')
        print(f'Model method: {model.method}')
        print(f'Predictions shape: {result.predictions.shape}')
        print(f'Weights: {weights}')
        print(f'Score: {score:.4f}')
        "
    
    - name: Verify output files
      run: |
        ls -la runs/ci_test/
        ls -la runs/ci_advanced/
        ls -la runs/ci_time/
        ls -la runs/ci_pdf/
        
        # Check that expected files exist
        test -f runs/ci_test/best_submission.csv
        test -f runs/ci_test/methods.csv
        test -f runs/ci_test/report.html
        test -f runs/ci_test/meta.json
        
        test -f runs/ci_advanced/weights.json
        test -f runs/ci_advanced/stacking_coefficients.json
        test -f runs/ci_advanced/decorrelation_info.json
        
        test -f runs/ci_time/window_metrics.csv
        
        test -f runs/ci_pdf/blend_summary.json
        # PDF might not be generated due to system dependencies
        # test -f runs/ci_pdf/report.pdf

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
